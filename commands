#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"
source "$(dirname $0)/functions"
set +e

if [[ $1 == redis:* ]]; then
  load_ip_and_container
fi

case "$1" in
  redis:console)
    check_app; verify_app_name "$APP"; check_exists
    PASSWORD=$(cat "$REDIS_ROOT/pass")
    docker exec -it "$REDIS_CONTAINER_NAME" env TERM="$TERM" redis-cli -a "$PASSWORD"
    ;;

  redis:url)
    check_container; check_app; verify_app_name "$APP"; check_exists
    db_url "$APP"
    ;;

  redis:create)
    check_app; verify_app_name "$APP"; check_already_exists
    PASSWORD=$(openssl rand -hex 32)    
    mkdir -p "$REDIS_ROOT"
    chown dokku:dokku "$REDIS_ROOT/pass"
    echo $PASSWORD > "$REDIS_ROOT/pass"
    chmod 600 "$REDIS_ROOT/pass"
    dokku_log_info1 "Creating database for $APP"
    docker run -d --name "$REDIS_CONTAINER_NAME" "$REDIS_IMAGE" > /dev/null
    load_ip_and_container
    set_env_for "$APP"
    ;;

  redis:delete)
    check_app; verify_app_name "$APP"; check_exists
    dokku_log_info1 "Deleting database for $APP"
    docker stop "$REDIS_CONTAINER_NAME" > /dev/null
    docker rm -f "$REDIS_CONTAINER_NAME" > /dev/null
    rm -fr "$REDIS_ROOT"
    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku_log_info1 "Unsetting config vars for $APP"
      dokku config:unset-norestart "$APP" REDIS_URL REDIS_HOST REDIS_PORT REDIS_NAME REDIS_PASS &> /dev/null
    fi
    ;;

  redis:list)
    dokku_col_log_info2_quiet "App Name" "Container id"
    for DOCKER_ID in $(docker ps | grep dokku-rediskr | awk '{print $1}'); do
      APP_NAME=$(docker ps | grep "$DOCKER_ID")
      dokku_col_log_msg "$APP_NAME" "$DOCKER_ID"
    done
    ;;

  redis:start)
    if [[ -n "$REDIS_ID" ]]; then
      echo "Redis container already running with ID: $REDIS_ID"
      exit 1
    fi
    OLD_ID=$(docker ps -f status=exited | grep "$REDIS_CONTAINER_NAME" | awk '{print $1}')
    if [[ -n $OLD_ID ]]; then
        OLD_ID=$(docker start $OLD_ID)
        dokku_log_info1 "Starting existing redis container $OLD_ID"
        exit 0
    fi
    dokku_log_info1 "Starting redis server"
    docker run -d --name "$REDIS_CONTAINER_NAME" "$REDIS_IMAGE" > /dev/null
    set_env_for "$APP"
    dokku_log_info2 "Restarting application: $APP"
    dokku ps:restart "$APP"
    ;;

  redis:restart)
    dokku redis:stop
    dokku redis:start
    ;;

  redis:stop)
    check_container
    dokku_log_info1 "Stopping redis server"
    docker stop "$REDIS_CONTAINER_NAME" > /dev/null
    ;;

  redis:dump)
    check_container; check_app; verify_app_name "$APP"; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    docker exec -i "$PSQL_CONTAINER_NAME" env PGPASSWORD="$PASSWORD" pg_dump -Fc --no-acl --no-owner -h localhost -U "$DATABASE" -w "$DATABASE"
    ;;

  redis:restore)
    check_container; check_app; verify_app_name "$APP"; check_exists
    DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    cat - | docker exec -i "$PSQL_CONTAINER_NAME" env PGPASSWORD="$PASSWORD" pg_restore -h localhost -cO -d "$DATABASE" -U "$DATABASE" -w
    ;;

  redis:status)
    [[ -n "$REDIS_ID" ]] && echo "Redis container running with ID: $REDIS_ID" && exit 0
    echo "Redis container not running"
    ;;

  help)
    cat && cat<<EOF
    redis:console     <app>                          Launch a redis cli for <app>
    redis:create      <app>                          Create a redis database for <app>
    redis:delete      <app>                          Delete redis database for <app>
    redis:dump        <app> > <filename.rdb>         Dump <app> database to rdb file
    redis:list                                       List all databases
    redis:restart     <app>                          Restart the redis docker container for <app>
    redis:restore     <app> < <filename.rdb>         Restore database to <app> from rdb file
    redis:start       <app>                          Start the redis docker container if it isn't running for <app>
    redis:status      <app>                          Shows status of redis for <app>
    redis:stop        <app>                          Stop the redis docker container for <app>
    redis:url         <app>                          Get REDIS_URL for <app>
EOF
    ;;
esac
