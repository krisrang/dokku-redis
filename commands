#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"
source "$(dirname $0)/functions"
set +e

if [[ $1 == redis:* ]]; then
  redis_load_container_id
fi

case "$1" in
  redis:console)
    verify_app_name "$APP"; redis_check_exists
    PASSWORD=$(cat "$REDIS_ROOT/PASS")
    interactive_docker_exec "$REDIS_ID" env TERM="$TERM" redis-cli -a "$PASSWORD"
    ;;

  redis:url)
    verify_app_name "$APP"; redis_check_exists
    redis_db_url "$APP"
    ;;

  redis:create)
    verify_app_name "$APP"; redis_check_already_exists    
    PASSWORD=$(openssl rand -hex 32)    
    mkdir -p "$REDIS_ROOT/data"
    echo $PASSWORD > "$REDIS_ROOT/PASS"
    chmod 600 "$REDIS_ROOT/PASS"
    cp "$(dirname $0)/redis.conf" "$REDIS_ROOT/redis.conf"
    sed -i.bak s/redispasshere/$PASSWORD/g "$REDIS_ROOT/redis.conf"
    
    if [[ $3 == "--bind-port" ]]; then
      PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
      BIND="$PORT:6379"
      echo $BIND > "$REDIS_ROOT/BIND"
      echo $PORT > "$REDIS_ROOT/PORT"
    else
      BIND="6379"
      echo "6379" > "$REDIS_ROOT/PORT"
      echo "6379" > "$REDIS_ROOT/BIND"
    fi
    
    dokku_log_info1 "Creating database for $APP"
    redis_start_container
    ;;

  redis:delete)
    verify_app_name "$APP"; redis_check_exists
    dokku_log_info1 "Deleting database for $APP"
    docker stop "$REDIS_ID" > /dev/null
    docker rm -f "$REDIS_ID" > /dev/null
    rm -fr "$REDIS_ROOT"
    ;;

  redis:list)
    dokku_col_log_info2_quiet "App Name" "Container id"
    for APP_NAME in $(dokku apps --quiet); do
      if [[ -f "$DOKKU_ROOT/$APP_NAME/rediskr/CONTAINERID" ]]; then
        CNT_ID=$(cat "$DOKKU_ROOT/$APP_NAME/rediskr/CONTAINERID")
        dokku_col_log_msg "$APP_NAME" "$CNT_ID"
      fi
    done
    ;;
    
  redis:restart)
    dokku redis:stop "$APP"
    dokku redis:start "$APP"
    ;;

  redis:stop)
    verify_app_name "$APP"; redis_check_exists
    dokku_log_info1 "Stopping redis server"
    docker stop "$REDIS_ID" > /dev/null
    ;;

  redis:dump)
    verify_app_name "$APP"; redis_check_exists
    cat "$REDIS_ROOT/data/dump.rdb"
    ;;

  redis:restore)
    verify_app_name "$APP"; redis_check_exists
    cat - > "$REDIS_ROOT/data/dump.rdb"
    dokku redis:restart "$APP"
    ;;

  redis:status)
    verify_app_name "$APP"; redis_check_exists
    [[ -n "$REDIS_ID" ]] && echo "Redis container running with ID: $REDIS_ID" && exit 0
    echo "Redis container not running"
    ;;  
    
  redis:env)
    verify_app_name "$APP"; redis_check_exists
    [[ -n "$REDIS_ID" ]] && redis_env_for "$APP" && exit 0
    ;;
    
  redis:pre_build)
    dokku redis:start-norestart
    ;;
    
  redis:start-norestart)
    verify_app_name "$APP"; redis_check_exists
    if [[ -n "$REDIS_ID" ]]; then
      echo "Redis container already running with ID: $REDIS_ID"
      exit 0
    fi
    if [[ -n $CNT_ID ]]; then
        CNT_ID=$(docker start $CNT_ID)
        dokku_log_info1 "Starting existing redis container $CNT_ID"
        exit 0
    fi
    dokku_log_info1 "Starting redis server"
    redis_start_container
    ;;    
  
  redis:start)
    dokku redis:start-norestart
    dokku_log_info2 "Restarting application: $APP"
    dokku ps:restart "$APP"
    ;;


  help)
    cat && cat<<EOF
    redis:console     <app>                          Launch a redis cli for <app>
    redis:create      <app>                          Create a redis database for <app>
    redis:delete      <app>                          Delete redis database for <app>
    redis:dump        <app> > <filename.rdb>         Dump <app> database to rdb file
    redis:list                                       List all databases
    redis:restart     <app>                          Restart the redis docker container for <app>
    redis:restore     <app> < <filename.rdb>         Restore database to <app> from rdb file
    redis:start       <app>                          Start the redis docker container if it isn't running for <app>
    redis:status      <app>                          Shows status of redis for <app>
    redis:stop        <app>                          Stop the redis docker container for <app>
    redis:url         <app>                          Get REDIS_URL for <app>
EOF
    ;;
esac
